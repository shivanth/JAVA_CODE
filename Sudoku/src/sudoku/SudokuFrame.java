/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJFrame.java
 *
 * Created on 8 Aug, 2010, 4:57:11 PM
 */
package sudoku;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author Shivanth
 */
public class SudokuFrame extends javax.swing.JFrame implements ActionListener {

    /** Creates new form NewJFrame */
    public SudokuFrame() {
        super();
        initComponents();
        panel = new SudokuRow[9];
        for (int i = 0; i < 9; i++) {
            panel[i] = new SudokuRow();
            getContentPane().add(panel[i]);
        }
        action = new JPanel();
        _OK = new JButton("Solve");
        _OK.addActionListener(this);
        action.add(_OK);
        getContentPane().add(action);
    }

   void  setdata(SudokuTable t) {
      getContentPane().removeAll();
       for (int i = 0; i < 9; i++) {
            panel[i] = new SudokuRow(t.getrow(i+1));
            
            add(panel[i]);
        }
         
        //getContentPane().add(action);
        _OK.setEnabled(false);

       
        
    }

    public int getData(int row, int col) {


        return panel[row].getBox(col);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    SudokuRow panel[];
    JPanel action;
    JButton _OK;
    SudokuTable table;
    

   

    public void actionPerformed(ActionEvent e) {
        boolean done = false;
        ProbTable prob[] = new ProbTable[10];
        SudokuTable maintable = new SudokuTable();
        for (int i = 1; i < 10; i++) {
            prob[i] = new ProbTable();
        }



         maintable=getdata();

         for(int i=1;i<10;i++){
             try{
             prob[i].init_fill_table(maintable, i);
             }
             catch(DataInvalidException ex){

             }
             catch(ErrorInTable ex){

             }
         }




         while (!done) {
            done = true;
            for (int i = 1; i < 10; i++) {
                if (prob[i].scan_table(maintable)) {
                    done = false;
                    for (int j = 1; j < 10; j++) {
                        if (j == i) {


                            try {
                                prob[i].kill_row(ProbTable.getROW());
                                prob[i].kill_column(ProbTable.getCOLUMN());
                                prob[i].kill_box(ProbTable.getROW(), ProbTable.getCOLUMN());
                                prob[i].writecell(ProbTable.getROW(), ProbTable.getCOLUMN(), 27);
                                maintable.setdata(ProbTable.getROW(), ProbTable.getCOLUMN(), i);
                                System.out.print(maintable);
                                System.out.println("");
                                System.out.println("");

                            } catch (ErrorInTable ex) {
                                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            prob[i].writecell(ProbTable.getROW(), ProbTable.getCOLUMN(), 27);
                            continue;
                        } else {
                            prob[j].killcell(ProbTable.getROW(), ProbTable.getCOLUMN());
                        }
                    }
                }
            }

        }
         if(maintable.issolved()){
             this.setVisible(false);
             setdata(maintable);
                        
             this.repaint();
             this.pack();
             this.setVisible(true);
         }
         else {
             final JDialog jd=new JDialog();
             jd.add(new JLabel("The Data entered iserreneous or insufficient"));
            
             
            JButton b = new JButton();
             b.addActionListener(new ActionListener(){

                public void actionPerformed(ActionEvent e) {
                    jd.setVisible(false);
                }
                 
             });
             jd.setLayout(new FlowLayout());
             jd.add(b);
              jd.pack();
              jd.setVisible(true);
         }
    }
    @SuppressWarnings("empty-statement")
    public SudokuTable getdata(){
        SudokuTable t=new SudokuTable();
        try{
        
        }
        catch(Exception e){
            
        }
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (getData(i, j) == 0) {
                    continue;
                } else {
                    t.setdata(i+1, j+1, getData(i, j));
                }
            }
        }

        return t;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
